#include <iostream>
#include <vector>

using namespace std;

int Andrei_and_acid() {
  int cnt_bags = 0;
  int num = 0;
  int current_pos = 0;
  int result = 0;
  vector<int> numbers;

  cin >> cnt_bags;
  cin >> num;
  numbers.push_back(num);
  for (int iter = 1; iter < cnt_bags; ++iter) {
    cin >> num;
    if (num < numbers.back()) return -1;
    if (num == numbers.back()) continue;
    numbers.push_back(num);
    if (num > numbers[current_pos]) current_pos = iter;
  }
  for (int j = numbers.size() - 1; j != 0; --j) {
    result += (numbers[j] - numbers[j - 1]);
  }
  return result;
}

int main_1()
{
  cout << Andrei_and_acid() << '\n';
  return 0;
}

/*
Андрей работает в секретной химической лаборатории, в которой производят опасную кислоту с удивительными свойствами. У Андрея есть
n бесконечно больших резервуаров, расположенных в один ряд. Изначально в каждом резервуаре находится некоторое количество кислоты.
Начальство Андрея требует, чтобы во всех резервуарах содержался одинаковый объем кислоты. К сожалению, разливающий аппарат несовершенен.
За одну операцию он способен разлить по одному литру кислоты в каждый из первых k(1≤k≤n) резервуаров.
Обратите внимание, что для разных операций k могут быть разными. Поскольку кислота очень дорогая, Андрею не разрешается выливать кислоту из резервуаров.
Андрей просит вас узнать, можно ли уравнять объемы кислоты в резервуарах, и, если это возможно, то посчитать минимальное количество операций, которое потребуется, чтобы этого достичь.

Формат ввода
Первая строка содержит число
n(1≤n≤100000) — количество резервуаров.
Во второй строке содержатся
n целых чисел
ai(1≤ai≤109), где
ai означает исходный объём кислоты в
i-м резервуаре в литрах.

Формат вывода
Если объемы кислоты в резервуарах можно уравнять, выведите минимальное количество операций, необходимых для этого.
Если это невозможно, выведите «-1».
*/
